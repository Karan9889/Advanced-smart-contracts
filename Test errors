Testing 

security-audit

Perform a security audit on the contract.

 Document in a report all the issues/vulnerabilities, classify their severities and provide recommendations.

Disclamer! This project is used for practicing security audit on a contract intentially coded with security vunerabilities. 

Audited by : Karanjot Singh Id : 101195883

Contract Audited BadKickback.sol link: https://github.com/ethereumgb/security-audit/blob/master/contracts/BadKickback.sol
 
The purpose of the contract, BadKickback, is used to encourage higher event turnout rate.

 The rule is to charge everyone a small fee when they sign up for the event. The fee will be refunded after the event check-in. No-shows will lose their fee, which will be split amongst the attendees.

Issues/Vulnerabilities In total, 5 issues were reported including:

1. owner privileges (the ability of an owner to manipulate contract, may be risky for participants). severity: critical Description only the owner can payout().

Recommendation Don't let the owner control the function. remove this code require(owner == msg.sender, "only owner can payout");

2. owner can choose who to payout. severity: critical Description the owner can choose the attendees for the payout().

Recommendation make the contract payout to all participents.


3. Self destruction vernabilityu
  Severity 
  owner privileges
  Description
  Anyone is allowed to call the self destruction function. 
  Selfdestruction of the callee contract can leave callers in an inoperable state.

 Recommendation
  Add the following code to the destroy() function:
  require(owner== msg.sender);

4. Gas requirement of payout function
   Severity
   critical

  Description
  If the gas requirement of a function is higher than the block gas limit, it cannot be executed.

  Recommendation
  The problem can be fixed by storing the attendees addresses in an array instead of mapping.

5. Static variable is not constant 
   Severity
    low

   Description
   The constant variable "cap" is not declared as a constant.
 
  Conclusion : 

The audited smart contract can not be deployed. 

This contract is not trustable as many critical severity found that shows that this contract many be to scam ether from participants.

